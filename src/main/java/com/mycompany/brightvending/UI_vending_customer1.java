/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.brightvending;

/**
 *
 * @author User
 */
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.text.DecimalFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

public class UI_vending_customer1 extends javax.swing.JFrame{
    
    private static final DecimalFormat dformat = new DecimalFormat("0.00");
    private final String productFile ="src/main/java/com/mycompany/brightvending/files/product.txt";
    /**
     * Creates new form UI_vending_customer1
     */
    public UI_vending_customer1() {
        initComponents();
        modifyComponents();
        callProductCard();
         Timer time = new Timer();
        time.schedule(new TimerTask() {
          @Override
          public void run() {
//            constantRefresh();
                LocalDateTime dateTimeNow = LocalDateTime.now();
                DateTimeFormatter dateTimeFormator = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");
                String formattedDateTime = dateTimeFormator.format(dateTimeNow);
                Timer.setText(formattedDateTime);
          }
        }, 0, 1000);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        Exit = new javax.swing.JButton();
        Timer = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        cartTable = new javax.swing.JTable();
        jPanel14 = new javax.swing.JPanel();
        RM1 = new javax.swing.JButton();
        RM5 = new javax.swing.JButton();
        RM10 = new javax.swing.JButton();
        RM50 = new javax.swing.JButton();
        RM100 = new javax.swing.JButton();
        Coin10sen = new javax.swing.JButton();
        Coin20sen = new javax.swing.JButton();
        Coin50sen = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        totalPriceUnderCart = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        deleteBtn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        ToBeInsert = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        insertedMoneyAmount = new javax.swing.JLabel();
        jPanel19 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        ChangeLabel = new javax.swing.JLabel();
        jPanelIn = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Bright Vending Machine | Customer View");
        setBackground(new java.awt.Color(255, 255, 255));
        setIconImage(Toolkit.getDefaultToolkit().getImage("src\\main\\java\\com\\mycompany\\brightvending\\image\\icon-vending-machine-64.png"));
        setMinimumSize(new java.awt.Dimension(1024, 768));
        setResizable(false);
        setSize(new java.awt.Dimension(1024, 768));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Forte", 0, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 78, 156));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Bright Vending Machine");

        Exit.setBackground(new java.awt.Color(204, 204, 204));
        Exit.setForeground(new java.awt.Color(0, 0, 0));
        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });

        Timer.setFont(new java.awt.Font("Sylfaen", 0, 24)); // NOI18N
        Timer.setText("Timer");
        Timer.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(Timer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 650, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Exit, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Exit, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(Timer))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(153, 255, 255));

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("CART");
        jLabel1.setToolTipText("");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jPanel13.setBackground(new java.awt.Color(255, 255, 255));

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        cartTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product", "Price", "Qty"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(cartTable);

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel14.setBackground(new java.awt.Color(255, 255, 255));

        RM1.setPreferredSize(new java.awt.Dimension(75, 33));
        RM1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RM1ActionPerformed(evt);
            }
        });

        RM5.setPreferredSize(new java.awt.Dimension(72, 33));
        RM5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RM5ActionPerformed(evt);
            }
        });

        RM10.setPreferredSize(new java.awt.Dimension(72, 33));
        RM10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RM10ActionPerformed(evt);
            }
        });

        RM50.setPreferredSize(new java.awt.Dimension(72, 33));
        RM50.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RM50ActionPerformed(evt);
            }
        });

        RM100.setPreferredSize(new java.awt.Dimension(72, 33));
        RM100.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RM100ActionPerformed(evt);
            }
        });

        Coin10sen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Coin10senActionPerformed(evt);
            }
        });

        Coin20sen.setPreferredSize(new java.awt.Dimension(72, 49));
        Coin20sen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Coin20senActionPerformed(evt);
            }
        });

        Coin50sen.setPreferredSize(new java.awt.Dimension(72, 49));
        Coin50sen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Coin50senActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(RM100, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(RM10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(RM5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(RM50, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(RM1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(Coin20sen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Coin50sen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Coin10sen, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(27, 27, 27))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(RM1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RM5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RM10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RM50, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RM100, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(Coin10sen, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Coin20sen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Coin50sen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Total: RM ");

        totalPriceUnderCart.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        totalPriceUnderCart.setForeground(new java.awt.Color(102, 102, 102));
        totalPriceUnderCart.setText("jLabel8");

        jLabel9.setBackground(new java.awt.Color(0, 0, 0));
        jLabel9.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 0));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel9.setText("INSERT MONEY");
        jLabel9.setToolTipText("");
        jLabel9.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);


        deleteBtn.setBackground(new java.awt.Color(204, 255, 204));
        deleteBtn.setForeground(new java.awt.Color(0, 51, 255));
        deleteBtn.setText("delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteBtn)
                        .addGap(23, 23, 23))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanel13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(10, 10, 10)))
                        .addContainerGap(16, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(totalPriceUnderCart, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteBtn)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(totalPriceUnderCart))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        jPanel3.setBackground(new java.awt.Color(204, 204, 255));

        jPanel18.setBackground(new java.awt.Color(255, 255, 255));
        jPanel18.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(0, 0, 0));
        jLabel13.setText("Money to be inserted:");

        jLabel14.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(0, 0, 0));
        jLabel14.setText("RM ");

        ToBeInsert.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        ToBeInsert.setForeground(new java.awt.Color(102, 102, 102));
        ToBeInsert.setText("jLabel8");

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel13))
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ToBeInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(ToBeInsert))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));
        jPanel8.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 0));
        jLabel10.setText("You have inserted:");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 0, 0));
        jLabel11.setText("RM ");

        insertedMoneyAmount.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        insertedMoneyAmount.setForeground(new java.awt.Color(102, 102, 102));
        insertedMoneyAmount.setText("jLabel8");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel10))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(insertedMoneyAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(insertedMoneyAmount))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel19.setBackground(new java.awt.Color(255, 255, 255));
        jPanel19.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(0, 0, 0));
        jLabel15.setText("Your Change:");

        jLabel16.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(0, 0, 0));
        jLabel16.setText("RM ");

        ChangeLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        ChangeLabel.setForeground(new java.awt.Color(102, 102, 102));
        ChangeLabel.setText("jLabel8");

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel19Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ChangeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel15))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(ChangeLabel))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addComponent(jPanel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelIn.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanelInLayout = new javax.swing.GroupLayout(jPanelIn);
        jPanelIn.setLayout(jPanelInLayout);
        jPanelInLayout.setHorizontalGroup(
            jPanelInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 730, Short.MAX_VALUE)
        );
        jPanelInLayout.setVerticalGroup(
            jPanelInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelIn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RM10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RM10ActionPerformed
        // TODO add your handling code here:
        InsertMoney(10.0);
    }//GEN-LAST:event_RM10ActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        // TODO add your handling code here:
        this.dispose();
        JOptionPane.showMessageDialog(null,"Thanks for using Bright Vending Machine!");
        customer_login page = new customer_login();
         page.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        page.pack();
        page.setResizable(false);
        page.setLocationRelativeTo(null);
        page.setVisible(true);
    }//GEN-LAST:event_ExitActionPerformed

    private void RM5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RM5ActionPerformed
        // TODO add your handling code here:
        InsertMoney(5.0);
    }//GEN-LAST:event_RM5ActionPerformed

    private void RM1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RM1ActionPerformed
        // TODO add your handling code here:
        InsertMoney(1.0);
    }//GEN-LAST:event_RM1ActionPerformed

    private void RM50ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RM50ActionPerformed
        // TODO add your handling code here:
        InsertMoney(50.0);
    }//GEN-LAST:event_RM50ActionPerformed

    private void RM100ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RM100ActionPerformed
        // TODO add your handling code here:
        InsertMoney(100.0);
    }//GEN-LAST:event_RM100ActionPerformed
    
    private void InsertMoney(double amount) {
        double moneyInserted = 0.0;
        
    // check item in cart, if empty, reject
        int numOfRow = cartTable.getRowCount();
        int numOfCol = cartTable.getColumnCount();
        if (numOfRow > 0) {
            
    // get how much inserted
            String moneyInsertedInVM = insertedMoneyAmount.getText();
        // if no money is inserted, then, set text directly
            if ("".equals(moneyInsertedInVM)) {
                insertedMoneyAmount.setText(dformat.format(amount));
            }
        // if money is inserted before, then add on and display
            else {
                moneyInserted = Double.parseDouble(moneyInsertedInVM);
                double sum = moneyInserted + amount;
                String sumString = dformat.format(sum);
                insertedMoneyAmount.setText(sumString);
            }
            
    // get the total amount from cart & total amount inserted
            double totalCart = Double.parseDouble(totalPriceUnderCart.getText());
            moneyInserted = Double.parseDouble(insertedMoneyAmount.getText()) ;
            
    // minus, ttl amt left - amount
           double change = moneyInserted - totalCart;
           
    // checking, check if ttl amt left is 0 or smaller, then it is paid, pop up msg show details and change
           if (change < 0) { //if negative, means the money is not enough
               change = totalCart - moneyInserted;
               String changes = dformat.format(change);
               ToBeInsert.setText(changes);
           }
           else { // money enough, continue payment
               
            // reduce stock - update the product file with the latest stock number, and then refresh the product table 
            // condition checking - for checking is it the last stock, then reduce and set 0, status false
            
            // using for loop, loop thru every cart item that need to reduce stock
            Object[] fetchAllProduct = CRUDFileHandling.FetchRecord(productFile);
            
            for (int i = 0; i < numOfRow; i ++) { // each Record of the cart
                String p_name_id = cartTable.getModel().getValueAt(i,0).toString();
                String p_qty = cartTable.getModel().getValueAt(i, 2).toString();
                
                // extract id from cart
                //p_name_id format -> id:1 , productname
                String[] splitedIDNAME = p_name_id.split(",");
                String id = splitedIDNAME[0].substring(3).trim();
                
                //fetch specific record, update the stock
                Object[] fetchOneProduct = CRUDFileHandling.FetchOneRecord(productFile, id);
                String title1 = (String) fetchOneProduct[0];
                String content1 = (String) fetchOneProduct[1];
                if (fetchOneProduct[0]=="ERROR"){
                    JOptionPane.showMessageDialog(null,content1, title1, JOptionPane.WARNING_MESSAGE);
                    return;
                }
                String Stringstock = (String) fetchOneProduct[3];
                
                // check quantity in stock and in the cart table
                int Intstock = Integer.parseInt(Stringstock); // from product.txt
                int Pro_qty = Integer.parseInt(p_qty); // from cart table
                if (Intstock <= 0) { // if no stocck
                    String refund = insertedMoneyAmount.getText(); // refund, most prob wont have this case, as upside already prevent add to cart if no stock
                    ToBeInsert.setText("");
                    ChangeLabel.setText(""+refund);
                    JOptionPane.showMessageDialog(null, fetchOneProduct[1]+"Out of stock. Your money is refunded. RM: " +refund , "Sorry", JOptionPane.WARNING_MESSAGE);
                    refreshAfterPurchase();
                    return;
                }
                
                int stockLeft = Intstock - Pro_qty; //product - cart (qty)
                String stock = ""+stockLeft;
                
                // reconstruct the data record (the stock updated) - > xxx;xxx;stock;xxx;xxx
                fetchOneProduct[3] = stock;
                String productRecord = "";
                for (int time = 0; time < fetchOneProduct.length; time++) {
                    if (time == 3) {
                        productRecord += stock + ";";
                        continue;
                    }
                    if (time == 4) {
                        productRecord += fetchOneProduct[time];
                        continue;
                    }
                    productRecord += fetchOneProduct[time] + ";";
                }
                
                if ("ERROR".equals(fetchAllProduct[0])){
                    JOptionPane.showMessageDialog(null,content1, title1, JOptionPane.WARNING_MESSAGE);
                    return;
                }
                // update to the whole record
                for (int each = 1; each < fetchAllProduct.length; each++) {
                    String fetched = fetchAllProduct[each].toString();
                    String[] data = fetched.split(";");
                    // if id match, then replace specific row
                    if (data[0].equals(id)) {
                         fetchAllProduct[each] = productRecord;
                         break;
                    }
                }
            }
            //overwrite record to product file
            String[] content = new String[fetchAllProduct.length];
            System.arraycopy(fetchAllProduct, 0, content, 0, fetchAllProduct.length);
            String[] contentModified = Arrays.copyOfRange(content, 1, content.length);

            String p_header = "ProductID;ProductName;ProductPrice;Stock;ProductPicture";
            Object[] updateRecord = CRUDFileHandling.InsertRecord(productFile, contentModified, p_header, "overwrite");
            String title2 = (String) updateRecord[0];
            String content2 = (String) updateRecord[1];
            if (updateRecord[0]=="ERROR"){
                JOptionPane.showMessageDialog(null,content2, title2, JOptionPane.WARNING_MESSAGE);
                return;
            }
            ToBeInsert.setText("0.00");
            String changeformated = dformat.format(change);
            ChangeLabel.setText(changeformated);
            
            // write receipt file
               String[][] tableData = new String[numOfRow][numOfCol];
               for (int rowloop = 0; rowloop < numOfRow; rowloop++) {
                   for(int colloop=0; colloop < numOfCol; colloop++){
                       tableData[rowloop][colloop] = (String) cartTable.getValueAt(rowloop,colloop);
                   }
               }
//    System.out.println(Arrays.deepToString(tableData));
               String receiptFile ="src/main/java/com/mycompany/brightvending/files/receipt.txt";
               String header = "ReceiptID;DateTime;TotalPrice;MoneyInserted;Chance;Item details";
               int receiptID = CRUDFileHandling.IDgeneration(receiptFile);
                DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");  
                LocalDateTime now = LocalDateTime.now();  
                String datetime = dtf.format(now);
//                System.out.println(receiptID);
                String stringArray = Arrays.deepToString(tableData);
                String[] receiptContent = {receiptID + ";" + datetime + ";" + dformat.format(totalCart) + ";" + dformat.format(moneyInserted) + ";" + changeformated + " ;" + stringArray};
                String[][] converted2D_array = DeepToArray.stringToDeep(stringArray);
                
                
                Object[] insertToReceipt = CRUDFileHandling.InsertRecord(receiptFile, receiptContent, header, "append");
                String msgTitle = (String) insertToReceipt[0];
                String msgContent = (String) insertToReceipt[1];
                if (!"ERROR".equals(msgTitle)) {
                   JOptionPane.showMessageDialog(null, "Purchase successfully\nYou have inserted: RM"+insertedMoneyAmount.getText() +"\nYour change: RM "+ChangeLabel.getText());
                    receipt showreceipt = new receipt(receiptID, datetime, converted2D_array, totalPriceUnderCart.getText(), insertedMoneyAmount.getText(),ChangeLabel.getText());
                   showreceipt.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    showreceipt.pack();
                    showreceipt.setResizable(false);
                    showreceipt.setLocationRelativeTo(null);
                    showreceipt.setVisible(true);
                }
                else {
                    JOptionPane.showMessageDialog(null, msgContent, msgTitle, JOptionPane.WARNING_MESSAGE);
                }
               
            // display receipt and products
               
               
               refreshAfterPurchase();
           }
        }
        else {
            JOptionPane.showMessageDialog(null, "Please select product before you pay");
        }
    }
    
    private void refreshAfterPurchase() {
        DefaultTableModel model = (DefaultTableModel) cartTable.getModel();
        model.setRowCount(0);
        totalPriceUnderCart.setText("");
        insertedMoneyAmount.setText("");
        ToBeInsert.setText("");
        ChangeLabel.setText("");
        callProductCard();
    }

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
        int numOfRow = cartTable.getSelectedRow();
        if (numOfRow >= 0) {
            int res = JOptionPane.showConfirmDialog(null, "Are you sure you wanted to delete the selected product?");
            if (res == JOptionPane.YES_OPTION) {
                DefaultTableModel model = (DefaultTableModel) cartTable.getModel();
                model.removeRow(numOfRow);       
                UpdateCart();
            }
        }
        else {
            JOptionPane.showMessageDialog(null, "Please select a record from the table first.");
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void Coin20senActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Coin20senActionPerformed
        // TODO add your handling code here:
        InsertMoney(0.2);
    }//GEN-LAST:event_Coin20senActionPerformed

    private void Coin10senActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Coin10senActionPerformed
        // TODO add your handling code here:
        InsertMoney(0.1);
    }//GEN-LAST:event_Coin10senActionPerformed

    private void Coin50senActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Coin50senActionPerformed
        // TODO add your handling code here:
        InsertMoney(0.5);
    }//GEN-LAST:event_Coin50senActionPerformed

    private void modifyComponents() {
        String[] moneyPath = {"rm1.jpg","rm5.jpg", "rm10.jpg", "rm50.jpg", "rm100.jpg"}; 
        String[] coinPath = {"10sen.jpg", "20sen.jpg", "50sen.jpg"};
        for (int i = 0; i < moneyPath.length;i++) {
            ImageIcon image = new ImageIcon("src/main/java/com/mycompany/brightvending/image/" + moneyPath[i]);
            Image img = image.getImage().getScaledInstance(70,33,Image.SCALE_SMOOTH);
            if (i == 0) {
                RM1.setIcon(new ImageIcon(img));
            }
            if (i == 1) {
                RM5.setIcon(new ImageIcon(img));
            }
            if (i == 2) {
                RM10.setIcon(new ImageIcon(img));
            }
            if (i == 3) {
                RM50.setIcon(new ImageIcon(img));
            }
            if (i == 4) {
                RM100.setIcon(new ImageIcon(img));
            }
        }
         for (int i = 0; i < coinPath.length;i++) {
            ImageIcon image = new ImageIcon("src/main/java/com/mycompany/brightvending/image/" + coinPath[i]);
            Image img = image.getImage().getScaledInstance(70,45,Image.SCALE_SMOOTH);
            if (i == 0) {
                Coin10sen.setIcon(new ImageIcon(img));
            }
            if (i == 1) {
                Coin20sen.setIcon(new ImageIcon(img));
            }
            if (i == 2) {
                Coin50sen.setIcon(new ImageIcon(img));
            }
        }
         totalPriceUnderCart.setText("");
         insertedMoneyAmount.setText("");
         ToBeInsert.setText("");
         ChangeLabel.setText("");
         totalPriceUnderCart.setForeground(Color.blue);
         insertedMoneyAmount.setForeground(Color.GREEN);
         ToBeInsert.setForeground(Color.red);
         ChangeLabel.setForeground(Color.black);
          cartTable.setRowHeight(cartTable.getRowHeight() + 10);
    }
    
    Product product = new Product();
    private void callProductCard() {
        //creating new panel
//        jPanelIn.setBackground(Color.BLUE);
        
        JPanel itemListContainer = new JPanel();
        itemListContainer.setBackground(Color.WHITE);
        itemListContainer.setLayout(new FlowLayout(FlowLayout.LEFT));
        
        //fetch record
        Object[] productRecord = CRUDFileHandling.FetchRecord("src/main/java/com/mycompany/brightvending/files/product.txt");
        if (productRecord[0] == "ERROR") {
             JOptionPane.showMessageDialog(null, productRecord[1], "ERROR", JOptionPane.WARNING_MESSAGE);
             return;
        }
        int numOfRecord = productRecord.length;
//        String type = ((Object)numOfRecord).getClass().getSimpleName();
        double numOfRow =numOfRecord/3;
//        System.out.println(numOfRow);
        if (numOfRow < 3) {
            itemListContainer.setPreferredSize(new Dimension(736,627));
        }
        else {
            double height = numOfRow * 180;
            int h = (int) Math.round(height);
            itemListContainer.setPreferredSize(new Dimension(736,h));
        }
        for (int x =0; x < numOfRecord ; x++) {
                if (x ==  0) {
                    continue;
                }
                String dataFetched = productRecord[x].toString();
                String[] data = dataFetched.split(";");
                
                
                for (int i =0; i < data.length; i++) {
                    // settiing product details
                    product.setProductID( Integer.parseInt((String) data[0]));
                    product.setProductName((String) data[1]);
                    product.setProductPicture((String) data[4]);
                    product.setProductPrice(Double. parseDouble(data[2]));
                    int stock = Integer.parseInt(data[3]);
                    product.setStock(stock);
                    if (stock > 0) {
                        product.setStatus(true);
                    }
                    else {
                        product.setStatus(false);
                    }
                }
                // call card UI
               JPanel productcard = product.productCardUI();
                product.PictureBtn.addActionListener(new java.awt.event.ActionListener(){
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        String stringid = (String) data[0];
                        int id = Integer.parseInt((String) data[0]);
                        Object[] fetchProduct = CRUDFileHandling.FetchOneRecord(productFile,stringid);
                        String title = (String) fetchProduct[0];
                        String content = (String) fetchProduct[1];
                        if ("ERROR".equals(title)) {
                            JOptionPane.showMessageDialog(null, content, title, JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        String Stringstock = (String) fetchProduct[3]; 
                        int Intstock = Integer.parseInt(Stringstock);
                        boolean status;
                        if (Intstock <= 0){
                            status = false;
                        }
                        else {
                            status = true;
                        }
//                        boolean status = product.getStatus();
                        if (status == false) {
                            JOptionPane.showMessageDialog(null, "Product Sold Out", "Sorry", JOptionPane.WARNING_MESSAGE);
                            return;
                        }

                       InsertCart(id, (String) data[1], Double. parseDouble(data[2]), Intstock);
                    }

                });
               itemListContainer.add(productcard);
          }
        
                JScrollPane containerScrollable = new JScrollPane(itemListContainer);
                containerScrollable.setVisible(true);
                containerScrollable.setSize(730,627);
                containerScrollable.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);  
                containerScrollable.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);  
                jPanelIn.add(containerScrollable);
    }
    
    private void InsertCart(int pid, String p_name, double p_price, int stock) {
        
       int quantity = 1;
       int numberOfRow = cartTable.getRowCount();
       String p_nameID = "id:"+pid+ " , "+  p_name;
        DefaultTableModel model = (DefaultTableModel)cartTable.getModel();
       
       // checking the product exist in cart or not
       if (numberOfRow != 0) {
            for (int i =0; i <numberOfRow; i ++) {
                // from table
                String p_id_name = cartTable.getModel().getValueAt(i, 0).toString();
                 String qty = cartTable.getModel().getValueAt(i, 2).toString();
                 int intqty = Integer.parseInt(qty);
                 // compare
                if (p_nameID.equals(p_id_name)) {
                    if (intqty >= stock) {
                        JOptionPane.showMessageDialog(null, "Product's stock isn't enough", "Sorry", JOptionPane.WARNING_MESSAGE);
                            return;
                    }
                    model.removeRow(i);
                    intqty += 1;
                    quantity = intqty;
                    break;
                }
            }
       }
       
       String price = ""+p_price;
       String p_qty =  ""+ quantity;
        String[] record = { p_nameID , price , p_qty};
        System.out.println(Arrays.toString(record));
        model.addRow(record);
        UpdateCart();
    }
    
    private void UpdateCart() {
        double total = 0.0;
        DefaultTableModel model = (DefaultTableModel)cartTable.getModel();
        int numberOfRow = model.getRowCount();
        for (int i = 0; i < numberOfRow; i++) {
            String price = (String) model.getValueAt(i,1);
            String qty =  (String) model.getValueAt(i, 2);
            double doubleprice = Double.parseDouble(price);
            int intqty = Integer.parseInt(qty);
            double subtotal = doubleprice*intqty;
            total += subtotal;
        }
        String formatedTotal = dformat.format(total);
        totalPriceUnderCart.setText(formatedTotal);
//        ToBeInsert.setText(formatedTotal);
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UI_vending_customer1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UI_vending_customer1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UI_vending_customer1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UI_vending_customer1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UI_vending_customer1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Coin10sen;
    private javax.swing.JButton Coin20sen;
    private javax.swing.JButton Coin50sen;
    private javax.swing.JButton Exit;
    private javax.swing.JButton RM1;
    private javax.swing.JButton RM10;
    private javax.swing.JButton RM100;
    private javax.swing.JButton RM5;
    private javax.swing.JButton RM50;
    private javax.swing.JLabel Timer;
    private javax.swing.JTable cartTable;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel insertedMoneyAmount;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel ToBeInsert;
    private javax.swing.JLabel ChangeLabel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanelIn;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel totalPriceUnderCart;
    // End of variables declaration//GEN-END:variables
}
